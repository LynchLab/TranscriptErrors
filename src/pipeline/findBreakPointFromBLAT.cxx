/**

@file
@author
@date
@brief This program parses a BLAT output that was generated by concatenating 2 occurrences of the consensus sequences. The program searches for the best BLAT hit and reports the coordinates (in the query) of this best hit.



 */





#include <iostream>
#include <fstream>
#include <sstream>

#include "PARSE_BLAST/parse_blast.hxx"
#include "UTILS_FASTA/utils_fasta.hxx"


using namespace std;


#define ARG_FILE_BLAT 1
#define ARG_FILE_READS 2


bool processBestHit(blast_m8 &b, ifstream &fReads);


int main(int argc, char *argv[]){


  if( argc<2 ){
    fprintf(stderr, "%s: parses a BLAT output to find position of breakpoint in circ-seq data.\n", argv[0]);
    fprintf(stderr, "Usage:\n%s out.blat reads.fastq\n", argv[0]);
    return 1;
  }


  string line;

  blast_m8 currentHit, bestHit;

  ifstream ficReads(argv[ARG_FILE_READS]);

  ifstream ficBLAT(argv[ARG_FILE_BLAT]);
  while( getline(ficBLAT, line) ){
    currentHit.make(line);
    if( currentHit.queryId_ != bestHit.queryId_ && bestHit.queryId_ != "" ){
      // Process the BLAT hit
      processBestHit(bestHit, ficReads);
      bestHit = currentHit;
    } else {
      if( currentHit.bitScore_ > bestHit.bitScore_ ){ bestHit = currentHit; }
    }
  }

  processBestHit(bestHit, ficReads);

  return 0;
}


bool processBestHit(blast_m8 &b, ifstream &fReads){

  fastqRead read;

  while( read.id_ != b.queryId_ &&  read.readNext(fReads) ){
    ;
  }

  if( read.id_ != b.queryId_ ){ return false; }

  int lgCs = read.seq_.size() / 2;

  // output the first 4 nucleotides of the re-organized consensus to search for ATCG

  int missingMap = lgCs - b.alnLength_;
  //if( missingMap>6 && b.queryStart_>missingMap ){
  //string cs = read.seq_.substr(b.queryStart_-(missingMap+1), b.alnLength_+(missingMap));
  //fprintf(stdout, ">%s\n%s\n", read.id_.c_str(), cs.c_str());
  //}

  if( missingMap <= 0 ){
    int start = b.queryStart_ - 1;
    int lg = b.alnLength_ + missingMap;
    string cs = read.seq_.substr(start, lg);
    string csQual = read.squal_.substr(start, lg);
    fprintf(stdout, "@%s\n%s\n%c\n%s\n", read.id_.c_str(), cs.c_str(), '+', csQual.c_str());
  }

  fprintf(stderr, "%s\t%d\t%d\t%d\n", read.id_.c_str(), lgCs, b.alnLength_, b.queryStart_-1);
  return true;

}
