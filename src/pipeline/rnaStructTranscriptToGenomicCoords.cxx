/*

  rnaStructTranscriptToGenomicCoords.cxx

  Converts the transcripts coordinates of files generated by Weiyi (with secondary structure of transcripts) into genomic coordinates.

 */


#include <stdlib.h>

#include <iostream>
#include <fstream>
#include <sstream>

#include <algorithm>
#include <vector>


#include "UTILS_FASTA/utils_fasta.hxx"
#include "GFF/GFFtranscripts_utils.hxx"


#define ARG_FILE_STRUCT 1
#define ARG_FILE_GFF 2
#define ARG_FILE_GENOME 3


using namespace std;


int main(int argc, char *argv[]){


  if(argc<2){
    fprintf(stderr, "%s: converts transcriptomic coordinates into genomic coordinates for files of RNA secondary structure provided by Weiyi.\n", argv[0]);
    fprintf(stderr, "Usage:\n%s file.struct annot.gtf genome.fa > res\n", argv[0]);
    return 1;
  }


  char tabBases[4] = {'A', 'T', 'C', 'G'};
  char tab_cpt['z'+'Z'];
  init_tab_cpt(tab_cpt);

  map<string,string> mg;
  fprintf(stderr, "Loading genome in memory (from '%s') ...", argv[ARG_FILE_GENOME]);
  loadFasta(mg, argv[ARG_FILE_GENOME]);
  fprintf(stderr, " done.\n");

  vector<string> vSources;
  vector<string> vFeatures;


  map<string, GFFtranscript> mt;
  fprintf(stderr, "Loading all transcripts in memory (from '%s') ...", argv[ARG_FILE_GFF]);
  //getAllTranscripts(argv[ARG_FILE_GFF], 0, mt, "GFF", "Name", 1);
  getAllTranscripts(argv[ARG_FILE_GFF], 0, mt, "GFF", "protein_id", 1, mg, tab_cpt, vSources, vFeatures);
  //getAllTranscripts(argv[ARG_FILE_GFF], 0, mt, "GTF", "transcript_id", 1);
  fprintf(stderr, " done.\n");


  string line, stmp, sType;
  string tID = "";
  GFFtranscript gt;

  ifstream ficStruct(argv[ARG_FILE_STRUCT]);
  while( getline(ficStruct, line) ){
    if(line.size()>0 && line[0]=='>'){
      tID = line.substr(1, line.size()-1);
      gt = mt[tID];
      fprintf(stderr, "%s (%s)\n", tID.c_str(), gt.strand_.c_str());
      fflush(stderr);
    } else {
      istringstream iss(line);
      getline(iss, stmp, '\t');
      getline(iss, sType, '\t');
      char cType = sType[0];

      long tPos = atol(stmp.c_str());
      long gPos = gt.splicedToGenomic(tPos);

      if( gPos<0 )
	continue;

      string chrID = gt.chr_;
      char gBase= mg[chrID].at(gPos);
      if( gt.strand_=="-" ){
	gBase = tab_cpt[gBase];
      }

      //fprintf(stdout, "%ld\t%c\n", gPos, gBase);
      fprintf(stdout, "%s\t%ld\t%c\n", chrID.c_str(), gPos, cType);
      fflush(stdout);
    }
  }


  return 0;
}

